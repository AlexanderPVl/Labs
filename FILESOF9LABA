#include <stdio.h>
#include <malloc.h>

typedef struct NODE
{
	struct NODE* Next;
	int Deg;
	int Koeff;
} NODE;

int NODE_SIZE = (int)sizeof(NODE);

NODE* MakeList();
NODE* AddNode(NODE* head, int deg, int koeff);
void PrintList(NODE* head);
void Delete(NODE* head);
NODE* MakeNewPoly(NODE* head1, NODE* head2, NODE** head3);
void MakeNowPoly2(NODE* head1, NODE* head2, NODE** head3);

void main()
{
	int i;
	NODE* List1 = MakeList();
	NODE* List2 = MakeList();
	NODE* List3 = MakeList();

	for (i = 0; i < 7; i++)
		AddNode(&List1, i + 1, i + 1);
	for (i = 0; i < 7; i++)
		AddNode(&List2, i + 5, i + 5);
	MakeNewPoly(List1, List2, &List3);

	PrintList(List1, "F1");
	PrintList(List2, "F2");
	PrintList(List3, "F3");

	Delete(List1);
	Delete(List2);
	Delete(List3);
}

int CheckDegree(int deg, int koeff, NODE* head)
{
	while (head)
	{
		if (head->Deg == deg){ head->Koeff += koeff; return 0; }
		head = head->Next;
	}
	return 1;
}

NODE* MakeList()
{
	NODE* Node = (NODE*)malloc(NODE_SIZE);
	Node->Next = NULL;
}

NODE* AddNode(NODE** head, int deg, int koeff)
{
	if (!CheckDegree(deg, koeff, head))return NULL;
	NODE* NewHead = (NODE*)malloc(NODE_SIZE);
	(*head)->Koeff = koeff;
	(*head)->Deg = deg;
	NewHead->Next = (*head);
	(*head) = NewHead;
}

void PrintList(NODE* head, char* Name)
{
	if (!head){ printf("%s = 0", Name); return; }
	NODE* next = head->Next;
	printf("%s(X) = ", Name);
	if (!next)printf("0");
	while (next != NULL)
	{
		printf("%d*X^%d", next->Koeff, next->Deg);
		if (next->Next)printf(" + ");
		next = next->Next;
	}
	printf("\n");
}

void Delete(NODE* head)
{
	if (!head)return;
	NODE* buf, *next = head;
	buf = head;
	while (next != NULL)
	{
		next = buf->Next;
		free(buf);
		buf = next;
	}
}

NODE* MakeNewPoly(NODE* head1, NODE* head2, NODE** head3)
{
	int fl;
	NODE *nod1, *nod2 = head2;

	while (nod2 != NULL)
	{
		fl = 0;
		nod1 = head1;
		while (nod1 != NULL)
		{
			if (nod1->Deg == nod2->Deg)fl = 1;
			nod1 = nod1->Next;
		}
		if (!fl) AddNode(head3, nod2->Deg, nod2->Koeff);
		nod2 = nod2->Next;
	}
}

void MakeNowPoly2(NODE* head1, NODE* head2, NODE** head3)
{

}
